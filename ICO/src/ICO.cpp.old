#include <bits/stdc++.h>
#include "../test/check.h"
using std::string;
/*Some bullshit global vars*/
std::vector < char > Q; // right hand side
std::vector < char > A; // always start with 0 and left hand side
std::vector < char > M;
std::string copy_Q; // right hand side
std::string copy_M;
int n = copy_M.size();
char zero = '0';

std::vector < char > fine;
std::vector < char > _add_;
std::vector < char > & __add__ = _add_;

std::string
to_binary(int & x) { // no need to comment this, everyone can understand
    if (x < 0)
        x *= -1; /*for negative numbers*/
    std::string y {};
    while (x > 0) {
        if (x % 2 == 0)
            y.insert(y.begin(), '0');
        else
            y.insert(y.begin(), '1');
        x >>= 1;
    }
    return y;
}

std::string reverse(std::string & x) { // same as the rest functions
    for (int i = 0; i < (int) x.size(); i++) {
        if (x[i] == '0') {
            x[i] = '1';
        } else {
            x[i] = '0';
        }
    }
    return x;
}

string to_compliment(string &a){ 
    string result = "";
    reverse(a);
    string b ="1";
    int s = 0;
    int i = a.size() - 1, j = b.size() - 1; 
    while (i >= 0 || j >= 0 || s == 1){
        s += ((i >= 0)? a[i] - '0': 0); 
        s += ((j >= 0)? b[j] - '0': 0); 
        result = char(s % 2 + '0') + result; 
        s /= 2; 
        i--; j--; 
    }
    return result;
}

string add(string &a, string &b){
    string result = "";
    int s = 0;
    int i = a.size() - 1, j = b.size() - 1;
    while (i >= 0 || j >= 0 || s == 1){
        s += ((i >= 0)? a[i] - '0': 0);
        s += ((j >= 0)? b[j] - '0': 0);
        result = char(s % 2 + '0') + result;
        s /= 2;
        i--; j--;
    }
    return result;
}

void print(std::vector < char > x) {
    for (auto c: x) {
        std::cout << c;
    }
    std::cout << "\n";
}

int to_char(std::vector < char > & x) {
    std::string str = "";
    for (int i = 0; i < (int) x.size(); i++) {
        str[i] = x.at(i);
    }
    int char_to = std::stoi(str);
    return char_to;
}

std::vector < char > __assign_all__;
void assign_all(std::vector < char > & A, std::vector < char > & Q, std::vector < char > & __assign_all__) {
    __assign_all__.clear();
    for (int i = 0; i < (int)(A.size()); i++) {
        __assign_all__.push_back(A.at(i));
    }
    for (int j = 0; j < (int)(A.size()); j++) {
        __assign_all__.push_back(Q.at(j));
    }
}

std::vector < char > __q_1;
std::vector < char > shift___q_1(std::vector < char > & __q_,
    std::vector < char > & __assign_all__) {
    __q_1.clear(); /*because of buffer*/
    __q_1.push_back(__assign_all__.at(__assign_all__.size() - 1));

    return __q_1;
}

void shift___m__() {} // this shit is constant.

std::vector < char > shift___q__(std::vector < char > & Q,
    std::vector < char > & __assign_all__) {
    Q.clear();
    for (int i = (int)(__assign_all__.size() - 1); i >= 4; --i) {
        Q.push_back(__assign_all__.at(i - 1));
    }
    return Q;
}

std::vector < char > shift___a__(std::vector < char > & A,
    std::vector < char > & __assign_all__) {
    A.clear();
    for (int i = 0; i < (int)((__assign_all__.size() / 2) - 1); i++) {
        A.push_back(__assign_all__.at(i));
    }
    A.insert(A.begin(), __assign_all__.at(0));
    return A;
}

int main(int args, char ** argv) {
    std::cout << "Enter number to calculate: ";
    int num_1, num_2;
    std::cin >> num_1;
    std::cin >> num_2;
    copy_M = to_binary(num_1);
    copy_Q = to_binary(num_2);
    check(copy_M);
    check(copy_Q);
    std::cout << "num_1 in bin: " << copy_M << std::endl;
    std::cout << "num_2 in bin: " << copy_Q << std::endl;

    for (int j = 0; j < 4; j++) {
        Q.push_back((copy_Q[j]));
        A.push_back((zero));
        M.push_back((copy_M[j]));
    }
  //  shift___q_1(__q_1, __assign_all__);
  //  assign_all(A,Q,__assign_all__);
  //  while(n > 0){
  //      if(Q.at(Q.size()-1)&&__q_1.at(__q_1.size()-1)){
  //          std::cout<<"good Q_1 is working";
  //          n--;
  //      }
  //  }
    assign_all(A,Q,__assign_all__);
    print(__assign_all__);
    shift___q_1(Q,__assign_all__);
    print(__q_1);
    shift___q__(Q,__assign_all__);
    print(Q);
    shift___a__(A,__assign_all__);
    print(A);



}
